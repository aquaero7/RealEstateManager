package com.aquaero.realestatemanager.model

import android.util.Log
import androidx.room.Entity
import androidx.room.PrimaryKey
import com.aquaero.realestatemanager.CACHE_LONG_ID_VALUE
import com.aquaero.realestatemanager.CACHE_NULLABLE_VALUE
import java.text.Normalizer
import kotlin.reflect.full.memberProperties
import kotlin.reflect.full.primaryConstructor
import kotlin.reflect.jvm.javaField

@Entity
data class Address(
    /*
     * Warning!
     * Due to the use of functions belonging to this class,
     * be sure to update their code if the name of the class properties
     * 'addressId', 'latitude' or 'longitude' changes
     */
    @PrimaryKey(autoGenerate = true)
    var addressId: Long = 0,
    var streetNumber: String?,
    var streetName: String?,
    var addInfo: String?,
    var city: String?,
    var state: String?,
    var zipCode: String?,
    var country: String?,
    var latitude: Double?,
    var longitude: Double?,
) {
    override fun toString(): String {
        return buildString {
            val line1: String = "${streetNumber.orEmpty()} ${streetName.orEmpty()}".trim()
            val line2: String = addInfo.orEmpty()
            val line3: String = city.orEmpty()
            val line4 = "${state.orEmpty()} ${zipCode.orEmpty()}".trim()
            val line5: String = country.orEmpty()

            val allLines = listOf(line1, line2, line3, line4, line5)
            for (line in allLines) {
                if (line.isNotEmpty()) appendLine(line)
            }
        }
    }

    fun toUrl(): String {
        val part1 = "${
            streetNumber.orEmpty().toU()
        }${if (!streetNumber.isNullOrEmpty() && !streetName.isNullOrEmpty()) "+" else ""}${
            streetName.orEmpty().toU()
        }"
        val part2 = addInfo.orEmpty().toU()
        val part3 = city.orEmpty().toU()
        val part4 = "${
            state.orEmpty().toU()
        }${if (!state.isNullOrEmpty() && !zipCode.isNullOrEmpty()) "+" else ""}${
            zipCode.orEmpty().toU()
        }"
        val part5 = country.orEmpty().toU()
        val staticUrl = "$part1,$part2,$part3,$part4,$part5"
        // String normalized
        val normalizedUrl = Normalizer.normalize(staticUrl, Normalizer.Form.NFD)
        // Returns string without accent (diacriticals marks)
        return Regex("\\p{InCombiningDiacriticalMarks}+").replace(normalizedUrl, "")
    }

    /**
     * Replaces spaces with '+' to fit URL format
     */
    private fun String.toU(): String = replace("\\s".toRegex(), "+")


    /**
     * Returns true if the value of all class properties in the instance,
     * excluding the id, latitude and longitude (identified by their name), is null or blank.
     * Otherwise returns false.
     */
    fun isNullOrBlank(): Boolean {
        /*
         * Warning!
         * If the name of the class properties 'addressId', 'latitude' or 'longitude'
         * used in this function changes in the constructor, be sure to update it
         */
        return this::class.memberProperties
            .filter { it.name !in listOf("addressId", "latitude", "longitude") }
            .all { it.call(this) == null || it.call(this).toString().isBlank() }
    }

    /**
     * Checks if all class properties (excluding the id identified by its name)
     * of two instances have the same value or not.
     * Returns true if at least one class property has different values. Otherwise, returns false.
     */
    fun hasDifferencesWith(other: Address): Boolean {
        /*
         * Warning!
         * If the name of the class property 'addressId' used in this function
         * changes in the constructor, be sure to update it
         */
        return this::class.memberProperties
            .filter { it.name != "addressId" }
            .any { it.call(this) != it.call(other) }
    }

    /**
     * Set to null all blank values of the class properties in the instance,
     * excluding the id (identified by its name).
     */
    fun replaceBlankValuesWithNull(): Address {
        /*
         * Warning!
         * If the name of the class property 'addressId' used in this function
         * changes in the constructor, be sure to update it
         */
        this::class.memberProperties
            // Filter properties to exclude the id and those already null
            .filter { it.name != "addressId" && it.call(this) != null }
            .forEach { property ->
                // Check for blank value and replace with null
                if (property.call(this).toString().isBlank()) {
                    property.javaField?.isAccessible = true
                    property.javaField?.set(this, null)
                }
            }
        return this
    }

    /**
     * Creates a new instance of the object without its id (or with its id set to 0),
     * so that it will be autogenerated by Room. The id is identified by its name.
     */
    fun withoutId(): Address {
        /*
         * Warning!
         * If the name of the class property 'addressId' used in this function
         * changes in the constructor, be sure to update it
         */

        // Get the primary constructor
        val constructor = this::class.primaryConstructor
            ?: error("Primary constructor not found for ${this::class.simpleName}")
        // Fill the map with parameter values, excluding the id
        val argsMap = constructor.parameters
            .filter { it.name != "addressId" }
            .associateWith { parameter -> this::class.memberProperties.first { it.name == parameter.name }.call(this) }
        // Create and return the new instance
        return constructor.callBy(argsMap)
    }

}


val CACHE_ADDRESS = Address(
    addressId = CACHE_LONG_ID_VALUE,
    streetNumber = CACHE_NULLABLE_VALUE,
    streetName = CACHE_NULLABLE_VALUE,
    addInfo = CACHE_NULLABLE_VALUE,
    city = CACHE_NULLABLE_VALUE,
    state = CACHE_NULLABLE_VALUE,
    zipCode = CACHE_NULLABLE_VALUE,
    country = CACHE_NULLABLE_VALUE,
    latitude = CACHE_NULLABLE_VALUE,
    longitude = CACHE_NULLABLE_VALUE
)




