package com.aquaero.realestatemanager.model

import androidx.room.ColumnInfo
import androidx.room.Entity
import androidx.room.ForeignKey
import androidx.room.PrimaryKey
import com.aquaero.realestatemanager.CACHE_EMPTY_STRING_VALUE
import com.aquaero.realestatemanager.CACHE_LONG_ID_VALUE
import com.aquaero.realestatemanager.CACHE_NULLABLE_VALUE
import com.aquaero.realestatemanager.NO_ITEM_ID
import kotlin.reflect.KParameter
import kotlin.reflect.full.primaryConstructor

@Entity(foreignKeys = [
    ForeignKey(entity = Property::class, parentColumns = ["propertyId"], childColumns = ["propertyId"],
        onDelete = ForeignKey.CASCADE, onUpdate = ForeignKey.CASCADE,
    ),
])
data class Photo(
    /**
     * Warning!
     * Because of the use of the function 'withoutId()', 'photoId' must always be the first property in the class
     */
    @PrimaryKey(autoGenerate = true)
    val photoId: Long = 0,
    val uri: String,
    val label: String?,
    @ColumnInfo(index = true)
    var propertyId: Long,
) {
    /**
     * Creates a new instance of the object without its id (identified by its index)
     * (or with its id set to 0) so that it is autogenerated by Room.
     */
    fun withoutId(): Photo {
        // Get the primary constructor
        val constructor = this::class.primaryConstructor
            ?: error("Primary constructor not found for ${this::class.simpleName}")

        // Initializes the map <parameter, value>
        val argsMap = mutableMapOf<KParameter, Any?>()

        // Fills the map with the values of the parameters of the constructor, excepted the first one (photoId)
        constructor.parameters.forEachIndexed { index, kParameter ->

            // TODO: Option 1   Choose one of them
            // Exclude the photoId value and get the other values from the photo instance
            if (index != 0) {
                val value = this::class.members.first { it.name == kParameter.name }.call(this)
                argsMap[kParameter] = value
            }

            /*
            // TODO: Option 2   Choose one of them
            // Set the photoId value to 0 and get the other values from the photo instance
            val value = if (index == 0) 0 else this::class.members.first { it.name == kParameter.name }.call(this)
            argsMap[kParameter] = value
            */

        }

        // Creates and returns the new instance created with the constructor and the values from the map
        return constructor.callBy(argsMap)
    }

}

val NO_PHOTO = Photo(photoId = NO_ITEM_ID, uri = "", label = "", propertyId = NO_ITEM_ID)

val PHOTO_PREPOPULATION_DATA = listOf(NO_PHOTO)

val CACHE_PHOTO = Photo(
    photoId = CACHE_LONG_ID_VALUE,
    uri = CACHE_EMPTY_STRING_VALUE,
    label = CACHE_NULLABLE_VALUE,
    propertyId = CACHE_LONG_ID_VALUE
)